generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider                  = "zod-prisma-types"
    createRelationValuesTypes = true
    writeNullishInModelTypes  = true
}

datasource db {
    provider = "postgresql"
    url      = env("ConnectionString")
}

model Address {
    id           String  @id @default(uuid())
    apartment    String
    floor        String
    building     String
    street       String
    city         String
    state        String
    country      String
    postalCode   String
    userId       String
    user         User    @relation(fields: [userId], references: [id])
    Order        Order[]
    storeAddress Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
}

model Cart {
    id          String     @id @default(uuid())
    cartItems   CartItem[]
    promoCodeId String?
    promoCode   PromoCode? @relation(fields: [promoCodeId], references: [id])
    user        User?
}

model CartItem {
    id        String  @id @default(uuid())
    productId String
    product   Product @relation(fields: [productId], references: [id])
    quantity  Int
    cartId    String
    cart      Cart    @relation(fields: [cartId], references: [id])
}

model Category {
    id       String    @id @default(uuid())
    name     String
    products Product[]
    search   search[]
}

model Order {
    id                String        @id @default(uuid())
    userId            String
    user              User          @relation(fields: [userId], references: [id], name: "OrderUser")
    transporterId     String?
    transporter       User?         @relation(fields: [transporterId], references: [id], name: "OrderTransporter")
    orderItems        OrderItem[]
    promoCodeId       String?
    promoCode         PromoCode?    @relation(fields: [promoCodeId], references: [id])
    totalCents        Int
    currency          String        @default("EGP")
    paymentMethod     PaymentMethod
    deliveryNeeded    Boolean
    status            OrderStatus
    PaymobOrderId     String?
    deliveryAddressId String
    deliveryAddress   Address       @relation(fields: [deliveryAddressId], references: [id])

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deliveredAt DateTime?
    deleted     Boolean   @default(false)
    deletedAt   DateTime?
}

enum OrderStatus {
    PAYING
    PROCESSING
    ON_THE_WAY
    DELIVERED
    CANCELLED
}

enum PaymentMethod {
    COD
    CREDITCARD
    MOBILEWALLET
}

model OrderItem {
    orderId            String
    productId          String
    order              Order   @relation(fields: [orderId], references: [id])
    product            Product @relation(fields: [productId], references: [id])
    productPriceCents  Int
    productSalePercent Int
    quantity           Int
    warrantyDays       Int

    @@id([orderId, productId])
}

model Product {
    id           String   @id @default(uuid())
    name         String
    sku          String
    description  String
    stock        Int      @default(0)
    views        Int      @default(0)
    priceCents   Int      @default(0)
    salePercent  Int      @default(0)
    reviews      Review[]
    warrantyDays Int      @default(14)
    categoryId   String
    category     Category @relation(fields: [categoryId], references: [id])
    wishers      User[]

    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    deleted   Boolean     @default(false)
    CartItem  CartItem[]
    OrderItem OrderItem[]
}

model PromoCode {
    id               String   @id @default(uuid())
    code             String
    description      String
    discountPercent  Int
    maxDiscountCents Int
    validFrom        DateTime
    validUntil       DateTime
    cart             Cart[]
    Order            Order[]
}

model Return {
    id            String  @id @default(uuid())
    reason        String
    status        String
    userId        String
    User          User    @relation(name: "ReturnUser", fields: [userId], references: [id])
    transporterId String?
    transporter   User?   @relation(name: "ReturnTransporter", fields: [transporterId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
}

model Review {
    id        String  @id @default(uuid())
    productId String
    product   Product @relation(fields: [productId], references: [id])
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    rating    Int
    comment   String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
}

model search {
    id         String   @id @default(uuid())
    keyWord    String
    userId     String?
    user       User?    @relation(fields: [userId], references: [id])
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
}

model User {
    id            String    @id @default(uuid())
    email         String    @unique
    emailVerified Boolean   @default(false)
    passwordHash  String
    name          String
    gender        Gender
    dob           DateTime
    phone         String?
    phoneVerified Boolean   @default(false)
    role          Role      @default(NOROLE)
    cartId        String    @unique
    cart          Cart      @relation(fields: [cartId], references: [id])
    addresses     Address[]
    wishlist      Product[]
    orders        Order[]   @relation("OrderUser")
    returns       Return[]  @relation("ReturnUser")

    orderTranports   Order[]  @relation("OrderTransporter")
    returnTransports Return[] @relation("ReturnTransporter")

    Review Review[]
    search search[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
}

enum Role {
    ADMIN
    MODERATOR
    TRANSPORTER
    NOROLE
}

enum Gender {
    MALE
    FEMALE
}
